name: UC-1-ALB-Path-Based-Routing-TF-1

on:
  workflow_dispatch:

env:
  TF_VERSION: "1.5.0"
  CHECKOV_VERSION: "2.3.314"

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform:
    name: 'Terraform Plan/Apply'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      
      # OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::994466158061:role/github-action-OIDC-Role
          aws-region: ap-south-1

      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform  # Adjust if your Terraform files are in a subdirectory

      # Format Terraform files
      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check -recursive
          echo "::notice::Terraform format check completed"

      # Validate Terraform configuration
      - name: Terraform Validate
        id: validate
        run: |
          terraform validate
          echo "::notice::Terraform validation completed"

      # Lint Terraform files using tflint
      - name: Install and Run TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init
          tflint

      # Run Checkov for security scanning
      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform
          framework: terraform
          quiet: true
          soft_fail: false
          version: ${{ env.CHECKOV_VERSION }}

      # Generate Terraform plan
      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false
          echo "::notice::Terraform plan generated for PR"

      # Apply Terraform changes (only on push to main)
      - name: Terraform Apply
        id: apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
          echo "::notice::Terraform changes applied"